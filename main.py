import telebot
import requests
import time
from datetime import datetime
from binance.client import Client

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = 'xxxxxxxxxxxxxxxxxxxxxxxxxx'
TELEGRAM_CHAT_ID = 'xxxxxxxxxxxxxxxxxxxxxxxxxx'
BINANCE_API_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxx'
BINANCE_SECRET_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxx'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
# LOWER_THRESHOLD_USDT = 0.0997
# UPPER_THRESHOLD_USDT = 0.0997
LOWER_THRESHOLD_USDC = 0.0995
UPPER_THRESHOLD_USDC = 1.0005

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏ Binance –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)


def log_message(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")


def get_current_price(symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å Binance"""
    try:
        ticker = client.get_symbol_ticker(symbol=symbol)
        price = float(ticker['price'])
        log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ {symbol}: {price}")
        return price
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        return None


def send_alert(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        bot.send_message(TELEGRAM_CHAT_ID, message)
        log_message(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ: {message}")
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def monitor_prices():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω"""
    log_message("üöÄ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤...")

    while True:
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ USDT
            # usdt_price = get_current_price('USDCUSDT')
            # if usdt_price is not None:
            #     if usdt_price <= LOWER_THRESHOLD_USDT:
            #         alert = f"üö® –í–Ω–∏–º–∞–Ω–∏–µ! –ö—É—Ä—Å USDT —É–ø–∞–ª –¥–æ {usdt_price}"
            #         send_alert(alert)
            #         log_message(f"‚¨áÔ∏è USDT –¥–æ—Å—Ç–∏–≥ –Ω–∏–∂–Ω–µ–≥–æ –ø–æ—Ä–æ–≥–∞: {usdt_price}")
            #     elif usdt_price >= UPPER_THRESHOLD_USDT:
            #         alert = f"üöÄ –í–Ω–∏–º–∞–Ω–∏–µ! –ö—É—Ä—Å USDT –ø–æ–¥–Ω—è–ª—Å—è –¥–æ {usdt_price}"
            #         send_alert(alert)
            #         log_message(f"‚¨ÜÔ∏è USDT –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø–æ—Ä–æ–≥–∞: {usdt_price}")

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ USDC
            usdc_price = get_current_price('USDCUSDT')
            if usdc_price is not None:
                if usdc_price <= LOWER_THRESHOLD_USDC:
                    alert = f"üö® –í–Ω–∏–º–∞–Ω–∏–µ! –ö—É—Ä—Å USDC —É–ø–∞–ª –¥–æ {usdc_price}"
                    send_alert(alert)
                    log_message(f"‚¨áÔ∏è USDC –¥–æ—Å—Ç–∏–≥ –Ω–∏–∂–Ω–µ–≥–æ –ø–æ—Ä–æ–≥–∞: {usdc_price}")
                elif usdc_price >= UPPER_THRESHOLD_USDC:
                    alert = f"üöÄ –í–Ω–∏–º–∞–Ω–∏–µ! –ö—É—Ä—Å USDC –ø–æ–¥–Ω—è–ª—Å—è –¥–æ {usdc_price}"
                    send_alert(alert)
                    log_message(f"‚¨ÜÔ∏è USDC –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø–æ—Ä–æ–≥–∞: {usdc_price}")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            log_message("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        except Exception as e:
            log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(1)


if __name__ == '__main__':
    log_message("ü§ñ –ë–æ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω!")
    monitor_prices()


